[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\stefano.napolitano\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\stefano.napolitano\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 229.9573ms
[debug]       Load.loadUnit: defsScala took 0.358ms
[debug] [Loading] Scanning directory C:\Users\stefano.napolitano\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\stefano.napolitano\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.2478 ms
[debug]           Load.resolveProject(global-plugins) took 32.3288ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\stefano.napolitano\.sbt\1.0\plugins, plugins: List(<none>))) took 65.1998ms
[debug] [Loading] Done in C:\Users\stefano.napolitano\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 80.6086ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1734ms
[debug]     Load.loadUnit(file:/C:/Users/stefano.napolitano/.sbt/1.0/plugins/, ...) took 318.2419ms
[debug]   Load.apply: load took 464.630801ms
[debug]   Load.apply: resolveProjects took 5.770999ms
[debug]   Load.apply: finalTransforms took 123.648701ms
[debug]   Load.apply: config.delegates took 20.212801ms
[debug]   Load.apply: Def.make(settings)... took 619.9778ms
[debug]   Load.apply: structureIndex took 98.487001ms
[debug]   Load.apply: mkStreams took 1.411499ms
[info] loading global plugins from C:\Users\stefano.napolitano\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4718.0947ms
[debug]           Load.loadUnit: plugins took 22.237999ms
[debug]           Load.loadUnit: defsScala took 0.0059ms
[debug] [Loading] Scanning directory C:\Users\stefano.napolitano\Downloads\scala\project
[debug]             Load.loadUnit: mkEval took 10.8702ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0635 ms
[info] loading settings for project scala-build from idea1.sbt ...
[debug]               Load.resolveProject(scala-build) took 4.4469ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-build, base: C:\Users\stefano.napolitano\Downloads\scala\project, plugins: List(<none>))) took 7.3163ms
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala\project, returning: (scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 220.851199ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.9195ms
[debug]         Load.loadUnit(file:/C:/Users/stefano.napolitano/Downloads/scala/project/, ...) took 251.331401ms
[debug]       Load.apply: load took 253.266899ms
[debug]       Load.apply: resolveProjects took 0.2278ms
[debug]       Load.apply: finalTransforms took 8.931199ms
[debug]       Load.apply: config.delegates took 0.4123ms
[debug]       Load.apply: Def.make(settings)... took 131.887999ms
[debug]       Load.apply: structureIndex took 52.233899ms
[debug]       Load.apply: mkStreams took 0.004301ms
[info] loading project definition from C:\Users\stefano.napolitano\Downloads\scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1065.0591ms
[debug]     Load.loadUnit: defsScala took 0.002299ms
[debug] [Loading] Scanning directory C:\Users\stefano.napolitano\Downloads\scala
[debug]       Load.loadUnit: mkEval took 0.1917ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2901 ms
[info] loading settings for project scala from build.sbt ...
[debug]         Load.resolveProject(scala) took 35.9124ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scala, base: C:\Users\stefano.napolitano\Downloads\scala, plugins: List(<none>))) took 39.453001ms
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala, returning: (scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 2230.7608ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.429101ms
[debug]   Load.loadUnit(file:/C:/Users/stefano.napolitano/Downloads/scala/, ...) took 3303.153999ms
[debug] Load.apply: load took 3305.0452ms
[debug] Load.apply: resolveProjects took 0.1542ms
[debug] Load.apply: finalTransforms took 21.4485ms
[debug] Load.apply: config.delegates took 0.306ms
[debug] Load.apply: Def.make(settings)... took 107.2808ms
[debug] Load.apply: structureIndex took 23.6131ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to main/scala/chapter2 (in build file:/C:/Users/stefano.napolitano/Downloads/scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64002 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64002, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to main/scala/chapter2 (in build file:/C:/Users/stefano.napolitano/Downloads/scala/)
[debug] > Exec(idea-shell, None, None)
