[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\stefano.napolitano\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\stefano.napolitano\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 97.124301ms
[debug]       Load.loadUnit: defsScala took 0.2507ms
[debug] [Loading] Scanning directory C:\Users\stefano.napolitano\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\stefano.napolitano\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 25.1441 ms
[debug]           Load.resolveProject(global-plugins) took 48.3984ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\stefano.napolitano\.sbt\1.0\plugins, plugins: List(<none>))) took 100.1529ms
[debug] [Loading] Done in C:\Users\stefano.napolitano\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 258.522501ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3976ms
[debug]     Load.loadUnit(file:/C:/Users/stefano.napolitano/.sbt/1.0/plugins/, ...) took 365.959301ms
[debug]   Load.apply: load took 619.192ms
[debug]   Load.apply: resolveProjects took 5.2483ms
[debug]   Load.apply: finalTransforms took 54.2716ms
[debug]   Load.apply: config.delegates took 7.1224ms
[debug]   Load.apply: Def.make(settings)... took 472.625599ms
[debug]   Load.apply: structureIndex took 194.9462ms
[debug]   Load.apply: mkStreams took 3.7659ms
[info] loading global plugins from C:\Users\stefano.napolitano\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2996.2013ms
[debug]           Load.loadUnit: plugins took 24.178501ms
[debug]           Load.loadUnit: defsScala took 0.0069ms
[debug] [Loading] Scanning directory C:\Users\stefano.napolitano\Downloads\scala\project
[debug]             Load.loadUnit: mkEval took 10.5685ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.848901 ms
[info] loading settings for project scala-build from idea1.sbt ...
[debug]               Load.resolveProject(scala-build) took 3.5086ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-build, base: C:\Users\stefano.napolitano\Downloads\scala\project, plugins: List(<none>))) took 5.9587ms
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala\project, returning: (scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4942.6176ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.642601ms
[debug]         Load.loadUnit(file:/C:/Users/stefano.napolitano/Downloads/scala/project/, ...) took 4972.7677ms
[debug]       Load.apply: load took 4974.5683ms
[debug]       Load.apply: resolveProjects took 0.1731ms
[debug]       Load.apply: finalTransforms took 8.7492ms
[debug]       Load.apply: config.delegates took 0.4572ms
[debug]       Load.apply: Def.make(settings)... took 114.3962ms
[debug]       Load.apply: structureIndex took 31.352699ms
[debug]       Load.apply: mkStreams took 0.0042ms
[info] loading project definition from C:\Users\stefano.napolitano\Downloads\scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6648.511699ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\stefano.napolitano\Downloads\scala
[debug]       Load.loadUnit: mkEval took 0.6118ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.362099 ms
[info] loading settings for project scala from build.sbt ...
[debug]         Load.resolveProject(scala) took 29.7761ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scala, base: C:\Users\stefano.napolitano\Downloads\scala, plugins: List(<none>))) took 33.502599ms
[debug] [Loading] Done in C:\Users\stefano.napolitano\Downloads\scala, returning: (scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 1466.7853ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.323599ms
[debug]   Load.loadUnit(file:/C:/Users/stefano.napolitano/Downloads/scala/, ...) took 8121.2962ms
[debug] Load.apply: load took 8123.187501ms
[debug] Load.apply: resolveProjects took 0.161201ms
[debug] Load.apply: finalTransforms took 27.943799ms
[debug] Load.apply: config.delegates took 0.375599ms
[debug] Load.apply: Def.make(settings)... took 116.7616ms
[debug] Load.apply: structureIndex took 47.2922ms
[debug] Load.apply: mkStreams took 0.003099ms
[info] set current project to main/scala/chapter2 (in build file:/C:/Users/stefano.napolitano/Downloads/scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59732 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59732, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to main/scala/chapter2 (in build file:/C:/Users/stefano.napolitano/Downloads/scala/)
[debug] > Exec(idea-shell, None, None)
